//
//  pointer.m
//  C
//
//  Created by 陈磊 on 2018/10/22.
//  Copyright © 2018 sinosoft. All rights reserved.
//



/*
 笔记：
     1.从语法的角度看，你只要把指针声明语句里的指针名字去掉，剩下的部分就是这个指针的类型。这是指针本身所具有的类型。让我们看看例一中各个指针的类型：
     (1)int*ptr;//指针的类型是int*
     (2)char*ptr;//指针的类型是char*
     (3)int**ptr;//指针的类型是int**
     (4)int(*ptr)[3];//指针的类型是int(*)[3]
     (5)int*(*ptr)[4];//指针的类型是int*(*)[4]
 
     2.当你通过指针来访问指针所指向的内存区时，指针所指向的类型决定了编译器将把那片内存区里的内容当做什么来看待。
 
     3.指针的类型(即指针本身的类型)和指针所指向的类型是两个概念
 
     4.指针的值是指针本身存储的数值，这个值将被编译器当作一个地址，而不是一个一般的数值。在32 位程序里，所有类型的指针的值都是一个32 位整数，因为32 位程序里内存地址全都是32 位长。指针所指向的内存区就是从指针的值所代表的那个内存地址开始，长度为sizeof(指针所指向的类型)的一片内存区。
 
     5.一个指针的值是XX，就相当于说该指针指向了以XX 为首地址的一片内存区域；我们说一个指针指向了某块内存区域，就相当于说该指针的值是这块内存区域的首地址。
 
     6.指针是一个地址，而指针变量是存放地址的变量。 所以说指针变量必定指向的是一个变量的地址，不是直接指向变量所指向的内容  但是为什么可以 NSString *s = @"a"
 
     7.“使指针向后移 1 个位置”或“使指针加 1”，这个 1 代表什么呢？这个 1 与指针变量的基类型是直接相关的。指针变量的基类型占几字节，这个 1 代表的就是几
 
 
 
 
 疑问：
 
 */

#import "pointer.h"

@implementation pointer
-(instancetype)init
{
    if (self = [super init]) {
        
        [self pointertest];
        
    }
    return self;
}



-(void)pointertest
{
    
    
    
    char *a = "a";
    /*
     笔记：测试依次定义两个变量  那么两个变量的地址是相邻的？
     
     
     疑问：
     
     */
    
    int i = 1;
    
    int l = 3;
    
    int *j, *k;
    
    j = &i;
    
    k = &l ;
    
    
    
    
    
    char b = 'b';
    
    char c[2] = "b";
    
    /*
     笔记：
     
     d指针还未初始化，所以它所指向的内存区是不存在的
     
     
     疑问：1.char a = 'a' 可以 但是char *a = 'a'不行？
     
     */
    
    char *d = NULL;
    
    char e[2] = "e";
    
    /*
     笔记：
     1.两个“int*”型的指针变量相减，第一个指针变量里面存放的地址是 1245036，第二个指针变量里面存放的地址是 1245032，那么这两个地址相减的结果是几？是 1，而不是 4。因为 int 型变量占 4 字节，所以一个 int 元素就占 4 字节，两个地址之间相差 4 个地址，正好是一个 int 元素，所以结果就是 1   但是指针运算 必须是定义在同一个 指针所指向的类型必须是一致的 NSLog(@"%lu",j-a); 这个b是不正确的
     2.当k这个指针变量没有赋值的时候打印的结果是4653476256375898112（null）  但是赋值的时候是 140732800526452
     
     
     
     疑问：
     
     */
    
    NSLog(@"%ld--%ld--%ld",l,j,&l);
    
    NSLog(@"%s--%c--%s--%s--%s",a,b,c,d,e);
    
}
@end
